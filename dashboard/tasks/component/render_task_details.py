from database.models.task import Task, TaskLogs, StepStatus
from scheduler.celery_app import celery_app
from utils.task_logging import log_dashboard

import streamlit as st
import pandas as pd
import json
import time


UPDATE_INTERVAL = 5


def table_block(task_id: int):
    task = Task.get(id=task_id)
    if not task:
        return

    data = {
        "ID": task.id,
        "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è": str(task.created_at),
        "–¢–µ–∫—É—â–∏–π —à–∞–≥": task.step_index,
        "–í—Å–µ–≥–æ —à–∞–≥–æ–≤": task.steps_total,
        "–°—Ç–∞—Ç—É—Å": str(task.step_status),
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∫–µ–º": task.locked_by,
        "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–æ": str(task.locked_until),
        "–ù–∞—á–∞—Ç–æ –≤": str(task.step_started_at),
        "–ü–æ–ø—ã—Ç–∫–∏": task.step_attempts,
        "–°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞": str(task.next_attempt_at),
        "–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞": task.last_error,
    }

    df = pd.DataFrame(list(data.items()), columns=["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ó–Ω–∞—á–µ–Ω–∏–µ"])
    st.subheader(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–¥–∞—á–∏ #{task.id}")
    st.dataframe(df, use_container_width=True, hide_index=True)


def button_block(task_id: int):
    task = Task.get(id=task_id)
    if not task:
        return
    
    col1, col2, col3 = st.columns(3)

    with col1:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", use_container_width=True):
            TaskLogs.delete_where(where=[TaskLogs.task_id == task_id])
            log_dashboard(task_id, "–ª–æ–≥–∏", "–û—á–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ –¥–∞—à–±–æ—Ä–¥")
            st.success("–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")

            st.rerun()

    with col2:
        if st.button("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —à–∞–≥", use_container_width=True):
            task.step_status = StepStatus.WAITING
            task.locked_by = None
            task.locked_until = None
            task.save()

            st.rerun()

    with col3:
        if st.button("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É", use_container_width=True):                    
            log_dashboard(task_id, "–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫", "–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –¥–∞—à–±–æ—Ä–¥")
            task.step_index = 0
            task.step_attempts = 0
            task.next_attempt_at = None
            task.last_error = None
            task.locked_by = None
            task.locked_until = None
            task.step_started_at = None
            task.step_status = StepStatus.WAITING
            task.save()

            st.rerun()


def render_task_details(task_id: int):
    cols = st.columns(2)
    if cols[0].button("‚Üê –í—Å–µ –∑–∞–¥–∞—á–∏"):
        st.query_params.pop("task_id", None)
        st.rerun()

    table_block(task_id)
    button_block(task_id)

    st.subheader(f"üßæ –õ–æ–≥–∏ –∑–∞–¥–∞—á–∏ #{task_id}")

    ctrl = st.columns([2, 1])
    auto = ctrl[0].toggle("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=False)

    logs = TaskLogs.filter_ex(
        where=[TaskLogs.task_id == task_id],
        order_by=TaskLogs.created_at.desc(),
        limit=2000,
        offset=0,
    )

    def _fmt_source(s: str) -> str:
        return {
            "celery": "Celery ‚öôÔ∏è", 
            "task": "Task üìÑ", 
            "dashboard": "Dashboard üñ•Ô∏è"
        }.get(s or "", s or "")

    rows = []
    for x in logs:
        try:
            obj = json.loads(x.description or "")
            rows.append({
                "–í—Ä–µ–º—è": x.created_at,
                "–ò—Å—Ç–æ—á–Ω–∏–∫": _fmt_source(obj.get("source", "")),
                "–≠—Ç–∞–ø": obj.get("stage", ""),
                "–°–æ–æ–±—â–µ–Ω–∏–µ": obj.get("message", ""),
            })
        except Exception:
            rows.append({
                "–í—Ä–µ–º—è": x.created_at,
                "–ò—Å—Ç–æ—á–Ω–∏–∫": "",
                "–≠—Ç–∞–ø": "",
                "–°–æ–æ–±—â–µ–Ω–∏–µ": x.description,
            })

    df = pd.DataFrame(rows)
    if df.empty:
        st.info("–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    else:
        st.dataframe(df, use_container_width=True, hide_index=True)

    if auto:
        time.sleep(UPDATE_INTERVAL)
        st.rerun()
